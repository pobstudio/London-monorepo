/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type MintCheckStruct = {
  to: string;
  tokenType: BigNumberish;
  uris: string[];
  signature: BytesLike;
};

export type MintCheckStructOutput = [string, BigNumber, string[], string] & {
  to: string;
  tokenType: BigNumber;
  uris: string[];
  signature: string;
};

export interface LondonBurnNobleInterface extends utils.Interface {
  functions: {
    'airdropAuthority()': FunctionFragment;
    'burnRevealBlockNumber()': FunctionFragment;
    'externalBurnableERC721()': FunctionFragment;
    'getAirdropHash(address,uint8)': FunctionFragment;
    'isSigned(address,bytes32,uint8,bytes32,bytes32)': FunctionFragment;
    'londonBurn()': FunctionFragment;
    'mintNobleType(uint8,bytes,(address,uint256,string[],bytes))': FunctionFragment;
    'owner()': FunctionFragment;
    'payableErc20()': FunctionFragment;
    'receivedAirdropNum(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revealBlockNumber()': FunctionFragment;
    'setAirdropAuthority(address)': FunctionFragment;
    'setBurnRevealBlockNumber(uint256)': FunctionFragment;
    'setRevealBlockNumber(uint256)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'setUltraSonicForkBlockNumber(uint256)': FunctionFragment;
    'splitSignature(bytes)': FunctionFragment;
    'sushiswap()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'ultraSonicForkBlockNumber()': FunctionFragment;
    'verifyAirdrop(address,uint8,bytes)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'airdropAuthority',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'burnRevealBlockNumber',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'externalBurnableERC721',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getAirdropHash',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isSigned',
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'londonBurn',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'mintNobleType',
    values: [BigNumberish, BytesLike, MintCheckStruct],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payableErc20',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'receivedAirdropNum',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'revealBlockNumber',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setAirdropAuthority',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBurnRevealBlockNumber',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRevealBlockNumber',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setUltraSonicForkBlockNumber',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'splitSignature',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'sushiswap', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ultraSonicForkBlockNumber',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'verifyAirdrop',
    values: [string, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'airdropAuthority',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burnRevealBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'externalBurnableERC721',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAirdropHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isSigned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'londonBurn', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mintNobleType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'payableErc20',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receivedAirdropNum',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'revealBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAirdropAuthority',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBurnRevealBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRevealBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTreasury',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUltraSonicForkBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'splitSignature',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sushiswap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'ultraSonicForkBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'verifyAirdrop',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LondonBurnNoble extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LondonBurnNobleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropAuthority(overrides?: CallOverrides): Promise<[string]>;

    burnRevealBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    externalBurnableERC721(overrides?: CallOverrides): Promise<[string]>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    londonBurn(overrides?: CallOverrides): Promise<[string]>;

    mintNobleType(
      nobility: BigNumberish,
      signature: BytesLike,
      mintCheck: MintCheckStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payableErc20(overrides?: CallOverrides): Promise<[string]>;

    receivedAirdropNum(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revealBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAirdropAuthority(
      _airdropAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBurnRevealBlockNumber(
      _burnRevealBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRevealBlockNumber(
      _revealBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    sushiswap(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  airdropAuthority(overrides?: CallOverrides): Promise<string>;

  burnRevealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  externalBurnableERC721(overrides?: CallOverrides): Promise<string>;

  getAirdropHash(
    to: string,
    nobility: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  isSigned(
    _address: string,
    messageHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  londonBurn(overrides?: CallOverrides): Promise<string>;

  mintNobleType(
    nobility: BigNumberish,
    signature: BytesLike,
    mintCheck: MintCheckStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payableErc20(overrides?: CallOverrides): Promise<string>;

  receivedAirdropNum(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  setAirdropAuthority(
    _airdropAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBurnRevealBlockNumber(
    _burnRevealBlockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRevealBlockNumber(
    _revealBlockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUltraSonicForkBlockNumber(
    _ultraSonicForkBlockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  splitSignature(
    sig: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  sushiswap(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  verifyAirdrop(
    to: string,
    nobility: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    airdropAuthority(overrides?: CallOverrides): Promise<string>;

    burnRevealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    externalBurnableERC721(overrides?: CallOverrides): Promise<string>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    londonBurn(overrides?: CallOverrides): Promise<string>;

    mintNobleType(
      nobility: BigNumberish,
      signature: BytesLike,
      mintCheck: MintCheckStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payableErc20(overrides?: CallOverrides): Promise<string>;

    receivedAirdropNum(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setAirdropAuthority(
      _airdropAuthority: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBurnRevealBlockNumber(
      _burnRevealBlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRevealBlockNumber(
      _revealBlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    sushiswap(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    airdropAuthority(overrides?: CallOverrides): Promise<BigNumber>;

    burnRevealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    externalBurnableERC721(overrides?: CallOverrides): Promise<BigNumber>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    londonBurn(overrides?: CallOverrides): Promise<BigNumber>;

    mintNobleType(
      nobility: BigNumberish,
      signature: BytesLike,
      mintCheck: MintCheckStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payableErc20(overrides?: CallOverrides): Promise<BigNumber>;

    receivedAirdropNum(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setAirdropAuthority(
      _airdropAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBurnRevealBlockNumber(
      _burnRevealBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRevealBlockNumber(
      _revealBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sushiswap(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropAuthority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnRevealBlockNumber(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    externalBurnableERC721(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    londonBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNobleType(
      nobility: BigNumberish,
      signature: BytesLike,
      mintCheck: MintCheckStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payableErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedAirdropNum(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revealBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAirdropAuthority(
      _airdropAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBurnRevealBlockNumber(
      _burnRevealBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRevealBlockNumber(
      _revealBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sushiswap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ultraSonicForkBlockNumber(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
