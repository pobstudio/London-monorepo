/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC20Mintable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Mintable__factory>;
    getContractFactory(
      name: 'ERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: 'ERC721Mintable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721Mintable__factory>;
    getContractFactory(
      name: 'BellCurveParametersStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BellCurveParametersStorage__factory>;
    getContractFactory(
      name: 'GasPriceBasedMinter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GasPriceBasedMinter__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: 'IERC721Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: 'IUniswapV2Router01',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: 'IUniswapV2Router02',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: 'LondonBurn',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurn__factory>;
    getContractFactory(
      name: 'LondonBurnAshen',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnAshen__factory>;
    getContractFactory(
      name: 'LondonBurnEternal',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnEternal__factory>;
    getContractFactory(
      name: 'LondonBurnGift',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnGift__factory>;
    getContractFactory(
      name: 'LondonBurnMinter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnMinter__factory>;
    getContractFactory(
      name: 'LondonBurnMinterBase',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnMinterBase__factory>;
    getContractFactory(
      name: 'LondonBurnNoble',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnNoble__factory>;
    getContractFactory(
      name: 'LondonBurnPristine',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonBurnPristine__factory>;
    getContractFactory(
      name: 'LondonGift',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LondonGift__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'Signature',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Signature__factory>;

    getContractAt(
      name: 'ERC165',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'ERC20Mintable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Mintable>;
    getContractAt(
      name: 'ERC721',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: 'ERC721Mintable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721Mintable>;
    getContractAt(
      name: 'BellCurveParametersStorage',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.BellCurveParametersStorage>;
    getContractAt(
      name: 'GasPriceBasedMinter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.GasPriceBasedMinter>;
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'IERC20Metadata',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: 'IERC721',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: 'IERC721Metadata',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: 'IERC721Receiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: 'IUniswapV2Router01',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: 'IUniswapV2Router02',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: 'LondonBurn',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurn>;
    getContractAt(
      name: 'LondonBurnAshen',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnAshen>;
    getContractAt(
      name: 'LondonBurnEternal',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnEternal>;
    getContractAt(
      name: 'LondonBurnGift',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnGift>;
    getContractAt(
      name: 'LondonBurnMinter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnMinter>;
    getContractAt(
      name: 'LondonBurnMinterBase',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnMinterBase>;
    getContractAt(
      name: 'LondonBurnNoble',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnNoble>;
    getContractAt(
      name: 'LondonBurnPristine',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonBurnPristine>;
    getContractAt(
      name: 'LondonGift',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LondonGift>;
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: 'Signature',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Signature>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
  }
}
