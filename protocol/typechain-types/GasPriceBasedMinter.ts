/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface GasPriceBasedMinterInterface extends utils.Interface {
  functions: {
    'a()': FunctionFragment;
    'b()': FunctionFragment;
    'blockNumberUpTo()': FunctionFragment;
    'c()': FunctionFragment;
    'd()': FunctionFragment;
    'erc20()': FunctionFragment;
    'mintableTokenAtGasPrice(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setErc20(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'a', values?: undefined): string;
  encodeFunctionData(functionFragment: 'b', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'blockNumberUpTo',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'c', values?: undefined): string;
  encodeFunctionData(functionFragment: 'd', values?: undefined): string;
  encodeFunctionData(functionFragment: 'erc20', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintableTokenAtGasPrice',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'setErc20', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;

  decodeFunctionResult(functionFragment: 'a', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'b', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'blockNumberUpTo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'c', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'erc20', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mintableTokenAtGasPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setErc20', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GasPriceBasedMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GasPriceBasedMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    a(overrides?: CallOverrides): Promise<[BigNumber]>;

    b(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockNumberUpTo(overrides?: CallOverrides): Promise<[BigNumber]>;

    c(overrides?: CallOverrides): Promise<[BigNumber]>;

    d(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    mintableTokenAtGasPrice(
      gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setErc20(
      _erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  a(overrides?: CallOverrides): Promise<BigNumber>;

  b(overrides?: CallOverrides): Promise<BigNumber>;

  blockNumberUpTo(overrides?: CallOverrides): Promise<BigNumber>;

  c(overrides?: CallOverrides): Promise<BigNumber>;

  d(overrides?: CallOverrides): Promise<BigNumber>;

  erc20(overrides?: CallOverrides): Promise<string>;

  mintableTokenAtGasPrice(
    gasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setErc20(
    _erc20: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    b(overrides?: CallOverrides): Promise<BigNumber>;

    blockNumberUpTo(overrides?: CallOverrides): Promise<BigNumber>;

    c(overrides?: CallOverrides): Promise<BigNumber>;

    d(overrides?: CallOverrides): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<string>;

    mintableTokenAtGasPrice(
      gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setErc20(_erc20: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    b(overrides?: CallOverrides): Promise<BigNumber>;

    blockNumberUpTo(overrides?: CallOverrides): Promise<BigNumber>;

    c(overrides?: CallOverrides): Promise<BigNumber>;

    d(overrides?: CallOverrides): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    mintableTokenAtGasPrice(
      gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setErc20(
      _erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    b(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockNumberUpTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    d(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintableTokenAtGasPrice(
      gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setErc20(
      _erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
