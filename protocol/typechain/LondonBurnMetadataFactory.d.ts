/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LondonBurnMetadataFactoryInterface extends ethers.utils.Interface {
  functions: {
    "constructTokenURI(uint256)": FunctionFragment;
    "convertUintToFloatString(uint256)": FunctionFragment;
    "generateSVGImage(uint256)": FunctionFragment;
    "getPathForDownwardIso(uint256)": FunctionFragment;
    "getPathForUpwardIso(uint256)": FunctionFragment;
    "getPrismD(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getPrismPath(string,string)": FunctionFragment;
    "getSquareRatio(uint256)": FunctionFragment;
    "getXFromThirtyAngle(uint256)": FunctionFragment;
    "getYFromThirtyAngle(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "constructTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUintToFloatString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathForDownwardIso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathForUpwardIso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrismD",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrismPath",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSquareRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getXFromThirtyAngle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYFromThirtyAngle",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "constructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUintToFloatString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPathForDownwardIso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPathForUpwardIso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrismD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrismPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSquareRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXFromThirtyAngle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYFromThirtyAngle",
    data: BytesLike
  ): Result;

  events: {};
}

export class LondonBurnMetadataFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LondonBurnMetadataFactoryInterface;

  functions: {
    constructTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "constructTokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { floatStr: string }>;

    "convertUintToFloatString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { floatStr: string }>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    "generateSVGImage(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    getPathForDownwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { path: string }>;

    "getPathForDownwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { path: string }>;

    getPathForUpwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { path: string }>;

    "getPathForUpwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { path: string }>;

    getPrismD(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    "getPrismD(uint256,uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    getPrismPath(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    "getPrismPath(string,string)"(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    getSquareRatio(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSquareRatio(uint256)"(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getXFromThirtyAngle(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getXFromThirtyAngle(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYFromThirtyAngle(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getYFromThirtyAngle(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  constructTokenURI(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "constructTokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  convertUintToFloatString(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "convertUintToFloatString(uint256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGImage(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateSVGImage(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPathForDownwardIso(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPathForDownwardIso(uint256)"(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPathForUpwardIso(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPathForUpwardIso(uint256)"(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrismD(
    x: BigNumberish,
    y: BigNumberish,
    w: BigNumberish,
    h: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPrismD(uint256,uint256,uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    w: BigNumberish,
    h: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrismPath(
    d: string,
    fill: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPrismPath(string,string)"(
    d: string,
    fill: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSquareRatio(
    w: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSquareRatio(uint256)"(
    w: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getXFromThirtyAngle(
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getXFromThirtyAngle(uint256)"(
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYFromThirtyAngle(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getYFromThirtyAngle(uint256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    constructTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "constructTokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "convertUintToFloatString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateSVGImage(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPathForDownwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPathForDownwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPathForUpwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPathForUpwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrismD(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPrismD(uint256,uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrismPath(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPrismPath(string,string)"(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSquareRatio(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSquareRatio(uint256)"(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getXFromThirtyAngle(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getXFromThirtyAngle(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYFromThirtyAngle(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYFromThirtyAngle(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    constructTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "constructTokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertUintToFloatString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateSVGImage(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPathForDownwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPathForDownwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPathForUpwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPathForUpwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrismD(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrismD(uint256,uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrismPath(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrismPath(string,string)"(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSquareRatio(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSquareRatio(uint256)"(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getXFromThirtyAngle(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getXFromThirtyAngle(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYFromThirtyAngle(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYFromThirtyAngle(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    constructTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "constructTokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertUintToFloatString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateSVGImage(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPathForDownwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPathForDownwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPathForUpwardIso(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPathForUpwardIso(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrismD(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrismD(uint256,uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      w: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrismPath(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrismPath(string,string)"(
      d: string,
      fill: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSquareRatio(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSquareRatio(uint256)"(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getXFromThirtyAngle(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getXFromThirtyAngle(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYFromThirtyAngle(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getYFromThirtyAngle(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
