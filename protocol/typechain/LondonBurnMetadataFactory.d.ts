/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface LondonBurnMetadataFactoryInterface extends ethers.utils.Interface {
  functions: {
    'convertUintToFloatString(uint256)': FunctionFragment;
    'generateBackground(bytes32,uint256,uint256,uint256,uint256)': FunctionFragment;
    'generateLayer(bytes32,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'generateSVGImage(uint256)': FunctionFragment;
    'getCoinFlip(bytes)': FunctionFragment;
    'getLineD(uint256,uint256,uint256,uint256)': FunctionFragment;
    'getLinePath(string,uint256)': FunctionFragment;
    'getRandomValue(uint256,uint256,bytes)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'convertUintToFloatString',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'generateBackground',
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'generateLayer',
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'generateSVGImage',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCoinFlip',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLineD',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLinePath',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRandomValue',
    values: [BigNumberish, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'convertUintToFloatString',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'generateBackground',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'generateLayer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'generateSVGImage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCoinFlip',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getLineD', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getLinePath',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRandomValue',
    data: BytesLike,
  ): Result;

  events: {};
}

export class LondonBurnMetadataFactory extends Contract {
  'connect'(signerOrProvider: Signer | Provider | string): this;
  'attach'(addressOrName: string): this;
  'deployed'(): Promise<this>;

  'on'(event: EventFilter | string, listener: Listener): this;
  'once'(event: EventFilter | string, listener: Listener): this;
  'addListener'(eventName: EventFilter | string, listener: Listener): this;
  'removeAllListeners'(eventName: EventFilter | string): this;
  'removeListener'(eventName: any, listener: Listener): this;

  'interface': LondonBurnMetadataFactoryInterface;

  'functions': {
    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { floatStr: string }>;

    'convertUintToFloatString(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { floatStr: string }>;

    generateBackground(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { path: string }>;

    'generateBackground(bytes32,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { path: string }>;

    generateLayer(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { path: string }>;

    'generateLayer(bytes32,uint256,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { path: string }>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { svg: string }>;

    'generateSVGImage(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { svg: string }>;

    getCoinFlip(seed: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    'getCoinFlip(bytes)'(
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getLineD(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { svg: string }>;

    'getLineD(uint256,uint256,uint256,uint256)'(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { svg: string }>;

    getLinePath(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { svg: string }>;

    'getLinePath(string,uint256)'(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { svg: string }>;

    getRandomValue(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getRandomValue(uint256,uint256,bytes)'(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  'convertUintToFloatString'(
    value: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'convertUintToFloatString(uint256)'(
    value: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'generateBackground'(
    seed: BytesLike,
    gridSize: BigNumberish,
    bounds: BigNumberish,
    margin: BigNumberish,
    backgroundColor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'generateBackground(bytes32,uint256,uint256,uint256,uint256)'(
    seed: BytesLike,
    gridSize: BigNumberish,
    bounds: BigNumberish,
    margin: BigNumberish,
    backgroundColor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'generateLayer'(
    seed: BytesLike,
    gridSize: BigNumberish,
    bounds: BigNumberish,
    margin: BigNumberish,
    chance: BigNumberish,
    color: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'generateLayer(bytes32,uint256,uint256,uint256,uint256,uint256)'(
    seed: BytesLike,
    gridSize: BigNumberish,
    bounds: BigNumberish,
    margin: BigNumberish,
    chance: BigNumberish,
    color: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'generateSVGImage'(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'generateSVGImage(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getCoinFlip'(seed: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'getCoinFlip(bytes)'(
    seed: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'getLineD'(
    x1: BigNumberish,
    y1: BigNumberish,
    dx: BigNumberish,
    dy: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getLineD(uint256,uint256,uint256,uint256)'(
    x1: BigNumberish,
    y1: BigNumberish,
    dx: BigNumberish,
    dy: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getLinePath'(
    d: string,
    color: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getLinePath(string,uint256)'(
    d: string,
    color: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getRandomValue'(
    min: BigNumberish,
    max: BigNumberish,
    seed: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getRandomValue(uint256,uint256,bytes)'(
    min: BigNumberish,
    max: BigNumberish,
    seed: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'callStatic': {
    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'convertUintToFloatString(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    generateBackground(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'generateBackground(bytes32,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    generateLayer(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'generateLayer(bytes32,uint256,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'generateSVGImage(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getCoinFlip(seed: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'getCoinFlip(bytes)'(
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getLineD(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getLineD(uint256,uint256,uint256,uint256)'(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getLinePath(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getLinePath(string,uint256)'(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRandomValue(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getRandomValue(uint256,uint256,bytes)'(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  'filters': {};

  'estimateGas': {
    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'convertUintToFloatString(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    generateBackground(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'generateBackground(bytes32,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    generateLayer(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'generateLayer(bytes32,uint256,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'generateSVGImage(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCoinFlip(seed: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'getCoinFlip(bytes)'(
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLineD(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLineD(uint256,uint256,uint256,uint256)'(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLinePath(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLinePath(string,uint256)'(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRandomValue(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getRandomValue(uint256,uint256,bytes)'(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  'populateTransaction': {
    convertUintToFloatString(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'convertUintToFloatString(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    generateBackground(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'generateBackground(bytes32,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      backgroundColor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    generateLayer(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'generateLayer(bytes32,uint256,uint256,uint256,uint256,uint256)'(
      seed: BytesLike,
      gridSize: BigNumberish,
      bounds: BigNumberish,
      margin: BigNumberish,
      chance: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'generateSVGImage(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCoinFlip(
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getCoinFlip(bytes)'(
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLineD(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLineD(uint256,uint256,uint256,uint256)'(
      x1: BigNumberish,
      y1: BigNumberish,
      dx: BigNumberish,
      dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLinePath(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLinePath(string,uint256)'(
      d: string,
      color: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRandomValue(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getRandomValue(uint256,uint256,bytes)'(
      min: BigNumberish,
      max: BigNumberish,
      seed: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
