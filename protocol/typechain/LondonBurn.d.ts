/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface LondonBurnInterface extends ethers.utils.Interface {
  functions: {
    'airdropSigner()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseMetadataURI()': FunctionFragment;
    'contractURI()': FunctionFragment;
    'externalBurnableERC721()': FunctionFragment;
    'getAirdropHash(address,uint8)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isSigned(address,bytes32,uint8,bytes32,bytes32)': FunctionFragment;
    'londonNeededFromGiftAmount(uint256)': FunctionFragment;
    'londonNeededFromSelfAmount(uint256)': FunctionFragment;
    'maxMintableSupply()': FunctionFragment;
    'mintAshenType(address,uint256[])': FunctionFragment;
    'mintGiftType(address,uint256[])': FunctionFragment;
    'mintNobleType(address,uint8,bytes)': FunctionFragment;
    'mintPristineType(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'numBurnFromGiftAmount(uint256)': FunctionFragment;
    'numBurnFromSelfAmount(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'payableErc20()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'setAirdropSigner(address)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseMetadataURI(string)': FunctionFragment;
    'setContractURI(string)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'setUltraSonicForkBlockNumber(uint256)': FunctionFragment;
    'splitSignature(bytes)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'ultraSonicForkBlockNumber()': FunctionFragment;
    'verifyAirdrop(address,uint8,bytes)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'airdropSigner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'baseMetadataURI',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'contractURI',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'externalBurnableERC721',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getAirdropHash',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'isSigned',
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'londonNeededFromGiftAmount',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'londonNeededFromSelfAmount',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMintableSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'mintAshenType',
    values: [string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintGiftType',
    values: [string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintNobleType',
    values: [string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintPristineType',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'numBurnFromGiftAmount',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'numBurnFromSelfAmount',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'payableErc20',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAirdropSigner',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBaseMetadataURI',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setContractURI',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setUltraSonicForkBlockNumber',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'splitSignature',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ultraSonicForkBlockNumber',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'verifyAirdrop',
    values: [string, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'airdropSigner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'baseMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'contractURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'externalBurnableERC721',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAirdropHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getApproved',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isSigned', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'londonNeededFromGiftAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'londonNeededFromSelfAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxMintableSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintAshenType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintGiftType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintNobleType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintPristineType',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'numBurnFromGiftAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numBurnFromSelfAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'payableErc20',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAirdropSigner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBaseMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setContractURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTreasury',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUltraSonicForkBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'splitSignature',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'ultraSonicForkBlockNumber',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'verifyAirdrop',
    data: BytesLike,
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export class LondonBurn extends Contract {
  'connect'(signerOrProvider: Signer | Provider | string): this;
  'attach'(addressOrName: string): this;
  'deployed'(): Promise<this>;

  'on'(event: EventFilter | string, listener: Listener): this;
  'once'(event: EventFilter | string, listener: Listener): this;
  'addListener'(eventName: EventFilter | string, listener: Listener): this;
  'removeAllListeners'(eventName: EventFilter | string): this;
  'removeListener'(eventName: any, listener: Listener): this;

  'interface': LondonBurnInterface;

  'functions': {
    airdropSigner(overrides?: CallOverrides): Promise<[string]>;

    'airdropSigner()'(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    baseMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    'baseMetadataURI()'(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    'contractURI()'(overrides?: CallOverrides): Promise<[string]>;

    externalBurnableERC721(overrides?: CallOverrides): Promise<[string]>;

    'externalBurnableERC721()'(overrides?: CallOverrides): Promise<[string]>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'getAirdropHash(address,uint8)'(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'isSigned(address,bytes32,uint8,bytes32,bytes32)'(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    londonNeededFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'londonNeededFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    londonNeededFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'londonNeededFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    maxMintableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxMintableSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAshenType(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'mintAshenType(address,uint256[])'(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    mintGiftType(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'mintGiftType(address,uint256[])'(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    mintNobleType(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'mintNobleType(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    mintPristineType(
      to: string,
      numMints: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'mintPristineType(address,uint256)'(
      to: string,
      numMints: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    'name()'(overrides?: CallOverrides): Promise<[string]>;

    numBurnFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'numBurnFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    numBurnFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'numBurnFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    payableErc20(overrides?: CallOverrides): Promise<[string]>;

    'payableErc20()'(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setAirdropSigner(
      _airdropSigner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setAirdropSigner(address)'(
      _airdropSigner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setBaseMetadataURI(
      _baseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setBaseMetadataURI(string)'(
      _baseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setContractURI(string)'(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setTreasury(address)'(
      _treasury: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setUltraSonicForkBlockNumber(uint256)'(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    'splitSignature(bytes)'(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    'symbol()'(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    'treasury()'(overrides?: CallOverrides): Promise<[string]>;

    ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    'ultraSonicForkBlockNumber()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'verifyAirdrop(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  'airdropSigner'(overrides?: CallOverrides): Promise<string>;

  'airdropSigner()'(overrides?: CallOverrides): Promise<string>;

  'approve'(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'balanceOf'(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(
    owner: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'baseMetadataURI'(overrides?: CallOverrides): Promise<string>;

  'baseMetadataURI()'(overrides?: CallOverrides): Promise<string>;

  'contractURI'(overrides?: CallOverrides): Promise<string>;

  'contractURI()'(overrides?: CallOverrides): Promise<string>;

  'externalBurnableERC721'(overrides?: CallOverrides): Promise<string>;

  'externalBurnableERC721()'(overrides?: CallOverrides): Promise<string>;

  'getAirdropHash'(
    to: string,
    nobility: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getAirdropHash(address,uint8)'(
    to: string,
    nobility: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getApproved'(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getApproved(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'isApprovedForAll'(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'isApprovedForAll(address,address)'(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'isSigned'(
    _address: string,
    messageHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'isSigned(address,bytes32,uint8,bytes32,bytes32)'(
    _address: string,
    messageHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'londonNeededFromGiftAmount'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'londonNeededFromGiftAmount(uint256)'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'londonNeededFromSelfAmount'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'londonNeededFromSelfAmount(uint256)'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'maxMintableSupply'(overrides?: CallOverrides): Promise<BigNumber>;

  'maxMintableSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  'mintAshenType'(
    to: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintAshenType(address,uint256[])'(
    to: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintGiftType'(
    to: string,
    giftTokenIds: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintGiftType(address,uint256[])'(
    to: string,
    giftTokenIds: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintNobleType'(
    to: string,
    nobility: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintNobleType(address,uint8,bytes)'(
    to: string,
    nobility: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintPristineType'(
    to: string,
    numMints: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintPristineType(address,uint256)'(
    to: string,
    numMints: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'name'(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  'numBurnFromGiftAmount'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'numBurnFromGiftAmount(uint256)'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'numBurnFromSelfAmount'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'numBurnFromSelfAmount(uint256)'(
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'owner'(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  'ownerOf'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'ownerOf(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'payableErc20'(overrides?: CallOverrides): Promise<string>;

  'payableErc20()'(overrides?: CallOverrides): Promise<string>;

  'renounceOwnership'(overrides?: Overrides): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setAirdropSigner'(
    _airdropSigner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setAirdropSigner(address)'(
    _airdropSigner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setApprovalForAll'(
    operator: string,
    approved: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setApprovalForAll(address,bool)'(
    operator: string,
    approved: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setBaseMetadataURI'(
    _baseMetadataURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setBaseMetadataURI(string)'(
    _baseMetadataURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setContractURI'(
    newContractURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setContractURI(string)'(
    newContractURI: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setTreasury'(
    _treasury: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setTreasury(address)'(
    _treasury: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setUltraSonicForkBlockNumber'(
    _ultraSonicForkBlockNumber: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setUltraSonicForkBlockNumber(uint256)'(
    _ultraSonicForkBlockNumber: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'splitSignature'(
    sig: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  'splitSignature(bytes)'(
    sig: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  'supportsInterface'(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'supportsInterface(bytes4)'(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'symbol'(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  'tokenURI'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'tokenURI(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'transferFrom'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'transferOwnership'(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'treasury'(overrides?: CallOverrides): Promise<string>;

  'treasury()'(overrides?: CallOverrides): Promise<string>;

  'ultraSonicForkBlockNumber'(overrides?: CallOverrides): Promise<BigNumber>;

  'ultraSonicForkBlockNumber()'(overrides?: CallOverrides): Promise<BigNumber>;

  'verifyAirdrop'(
    to: string,
    nobility: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'verifyAirdrop(address,uint8,bytes)'(
    to: string,
    nobility: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'callStatic': {
    airdropSigner(overrides?: CallOverrides): Promise<string>;

    'airdropSigner()'(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    baseMetadataURI(overrides?: CallOverrides): Promise<string>;

    'baseMetadataURI()'(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    'contractURI()'(overrides?: CallOverrides): Promise<string>;

    externalBurnableERC721(overrides?: CallOverrides): Promise<string>;

    'externalBurnableERC721()'(overrides?: CallOverrides): Promise<string>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getAirdropHash(address,uint8)'(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'isSigned(address,bytes32,uint8,bytes32,bytes32)'(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    londonNeededFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'londonNeededFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    londonNeededFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'londonNeededFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxMintableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'maxMintableSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mintAshenType(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'mintAshenType(address,uint256[])'(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    mintGiftType(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'mintGiftType(address,uint256[])'(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    mintNobleType(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'mintNobleType(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintPristineType(
      to: string,
      numMints: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'mintPristineType(address,uint256)'(
      to: string,
      numMints: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    numBurnFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'numBurnFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    numBurnFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'numBurnFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    payableErc20(overrides?: CallOverrides): Promise<string>;

    'payableErc20()'(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAirdropSigner(
      _airdropSigner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setAirdropSigner(address)'(
      _airdropSigner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBaseMetadataURI(
      _baseMetadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBaseMetadataURI(string)'(
      _baseMetadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setContractURI(string)'(
      newContractURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    'setTreasury(address)'(
      _treasury: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setUltraSonicForkBlockNumber(uint256)'(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    'splitSignature(bytes)'(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    'treasury()'(overrides?: CallOverrides): Promise<string>;

    ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    'ultraSonicForkBlockNumber()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'verifyAirdrop(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  'filters': {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null,
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null,
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null,
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null,
    ): EventFilter;
  };

  'estimateGas': {
    airdropSigner(overrides?: CallOverrides): Promise<BigNumber>;

    'airdropSigner()'(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    baseMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    'baseMetadataURI()'(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    'contractURI()'(overrides?: CallOverrides): Promise<BigNumber>;

    externalBurnableERC721(overrides?: CallOverrides): Promise<BigNumber>;

    'externalBurnableERC721()'(overrides?: CallOverrides): Promise<BigNumber>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getAirdropHash(address,uint8)'(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'isSigned(address,bytes32,uint8,bytes32,bytes32)'(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    londonNeededFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'londonNeededFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    londonNeededFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'londonNeededFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxMintableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'maxMintableSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mintAshenType(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'mintAshenType(address,uint256[])'(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>;

    mintGiftType(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'mintGiftType(address,uint256[])'(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>;

    mintNobleType(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'mintNobleType(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    mintPristineType(
      to: string,
      numMints: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'mintPristineType(address,uint256)'(
      to: string,
      numMints: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    numBurnFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'numBurnFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    numBurnFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'numBurnFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    payableErc20(overrides?: CallOverrides): Promise<BigNumber>;

    'payableErc20()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setAirdropSigner(
      _airdropSigner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setAirdropSigner(address)'(
      _airdropSigner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setBaseMetadataURI(
      _baseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setBaseMetadataURI(string)'(
      _baseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setContractURI(string)'(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides): Promise<BigNumber>;

    'setTreasury(address)'(
      _treasury: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setUltraSonicForkBlockNumber(uint256)'(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'splitSignature(bytes)'(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    'treasury()'(overrides?: CallOverrides): Promise<BigNumber>;

    ultraSonicForkBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    'ultraSonicForkBlockNumber()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'verifyAirdrop(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  'populateTransaction': {
    airdropSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'airdropSigner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    baseMetadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'baseMetadataURI()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'contractURI()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalBurnableERC721(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'externalBurnableERC721()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAirdropHash(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getAirdropHash(address,uint8)'(
      to: string,
      nobility: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isSigned(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isSigned(address,bytes32,uint8,bytes32,bytes32)'(
      _address: string,
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    londonNeededFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'londonNeededFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    londonNeededFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'londonNeededFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxMintableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'maxMintableSupply()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mintAshenType(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'mintAshenType(address,uint256[])'(
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    mintGiftType(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'mintGiftType(address,uint256[])'(
      to: string,
      giftTokenIds: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    mintNobleType(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'mintNobleType(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    mintPristineType(
      to: string,
      numMints: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'mintPristineType(address,uint256)'(
      to: string,
      numMints: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numBurnFromGiftAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'numBurnFromGiftAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    numBurnFromSelfAmount(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'numBurnFromSelfAmount(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    payableErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'payableErc20()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setAirdropSigner(
      _airdropSigner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setAirdropSigner(address)'(
      _airdropSigner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setBaseMetadataURI(
      _baseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setBaseMetadataURI(string)'(
      _baseMetadataURI: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setContractURI(string)'(
      newContractURI: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setTreasury(address)'(
      _treasury: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setUltraSonicForkBlockNumber(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setUltraSonicForkBlockNumber(uint256)'(
      _ultraSonicForkBlockNumber: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    splitSignature(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'splitSignature(bytes)'(
      sig: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'treasury()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ultraSonicForkBlockNumber(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'ultraSonicForkBlockNumber()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verifyAirdrop(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'verifyAirdrop(address,uint8,bytes)'(
      to: string,
      nobility: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
